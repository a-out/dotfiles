#! /Users/richard/code/tools/scripts/.venv/bin/python

from glob import iglob
from typing import List, Iterable, Set
import attr
from os import path
import re
import shutil

DESKTOP_PATH = "/Users/richard/Desktop/"


@attr.s(auto_attribs=True)
class FiletypeMapping:
    label: str
    directory: str
    regex: str


FILETYPE_MAPPINGS = [
    FiletypeMapping(label="notes", directory="~/Documents/notes/", regex=".*(md|txt)$"),
    FiletypeMapping(
        label="screenshots",
        directory="~/Documents/screenshots/",
        regex="Screen Shot.*.png$",
    ),
    FiletypeMapping(
        label="misc-docs",
        directory="~/Documents/misc/",
        regex=".*(pdf|json)$",
    ),
]  # type: List[FiletypeMapping]


def filter_files(all_files: Iterable[str], mapping: FiletypeMapping) -> Set[str]:
    files = set()
    for file in all_files:
        if re.match(mapping.regex, path.basename(file)):
            files.add(file)

    return files


def move_file(mapping: FiletypeMapping, file: str):
    dest_path = path.expanduser(mapping.directory)
    dest_filename = path.join(dest_path, path.basename(file))

    if path.exists(dest_filename):
        print(f"\n\tERROR: File at {dest_filename} already exists. Please rename it.")
        return

    try:
        shutil.move(file, dest_path)
        print("[DONE]")
    except shutil.Error:
        print(f"ERROR: Unknown error while moving {file}.")


remaining_files = set(iglob(path.join(DESKTOP_PATH, "*")))
for fm in FILETYPE_MAPPINGS:
    files_to_move = filter_files(remaining_files, fm)
    remaining_files = remaining_files.difference(files_to_move)

    if len(files_to_move):
        print(f"Moving {len(files_to_move)} {fm.label} files to {fm.directory}:")

    for file_to_move in files_to_move:
        print(f"\t{path.basename(file_to_move):60}", end="\t")
        move_file(fm, file_to_move)
